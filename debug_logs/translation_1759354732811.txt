Cheats for Battlefield 6 have been around for months before the game even launched. I dove into the darkest corners of the internet to find them. And what I discovered might surprise you. Bizarre sites full of leaked gameplay footage and tons of mysteries hidden inside these programs. But it doesn’t stop there. Many of these cheats are actually unsung heroes who protect you by hacking those who refuse to play fair. And let’s be honest, watching a cheater get owned is almost therapeutic. Today we’re going to have a full session on that. I’m going to download several of these suspicious programs and show you exactly what they do. So get ready for a journey packed with malware, shameless scams, and, of course, lots and lots of Russians and mysteries for us to solve. No more spoilers—this video is insane and super easy to follow. Let’s go! Warning: educational video. Don’t try this at home.

In case you’ve been living under a rock, Battlefield 6 was just announced recently. And with it came two open betas where anyone could download and play. But to do that, you had to install a kernel-level anti-cheat called Javelin. Kernel-level anti-cheats are new and highly controversial. The reason is simple: they’re extremely dangerous and intrusive. To sum it up, your PC has two levels. User Mode, where your normal programs run with limited access, and Kernel Mode, the heart of your system with full control over everything. Conventional cheats operate in User Mode, the same level as the games and common anti-cheats. This coexistence lets the cheat software interact directly with the game’s processes, reading its memory and manipulating its behavior to gain unfair advantages. A famous example is Wallhack, where cheats fetch enemy positions—positions normally invisible to the player—and render them on screen. Then there’s Aim Bot, a well-known tool that pulls your crosshair onto targets to guarantee hits. By the way, the app you’re seeing on screen was whipped up quickly with Lovable, an AI that lets you build websites and web apps with just a few text prompts, even if you don’t know much about development. I’ll talk more about it soon, because it’s fascinating. Stay tuned for more.

Back to cheats: since they usually run at the same privilege level as conventional anti-cheats, it’s easy for them to hide and avoid detection. To fight this, modern anti-cheats decided to drop down a level and operate in Kernel Mode—just like an antivirus—so they can monitor absolutely everything. And that’s where the danger lies. They can literally do whatever they want on your machine. Vanguard, the Valorant anti-cheat, is a famous example, criticized for being one of the most aggressive out there. You might ask: what if these programs have a security flaw? Well, your entire PC is at risk and you’re screwed. That actually happened with Genshin Impact, where a malware used their anti-cheat to infect victims with ransomware. Now we have Javelin, which EA claims is super advanced. In the first beta, they say they blocked around 300,000 cheating attempts. But did they block them all? We’re about to find out.

This video was your suggestion, so if you want more, leave a comment with the next game or cheat you’d like me to explore. I can even make a full video on cheats and anti-cheats. Now, heading over to Google, I searched for BF6 cheats. The first page didn’t help much—just articles about Javelin and the cheating attempts I mentioned—which forced me to do something many consider taboo: go to Google’s famous second page. That’s where it got interesting, with sites specialized in cheats and similar stuff. On the very first site I found a recording of the supposed cheat in action. But a few things caught my eye. The names were censored. Why? Well, obviously to avoid exposing the player’s lobby and getting him banned. But is that really the only reason? If so, why is the kill feed still visible? And all the footage looks ridiculously chaotic, with low resolution. If you look at the screenshots below, you see there’s a section in the training range—but it’s only an image, not video. Why? Wouldn’t it be way more practical to show the cheat running in the training area so you could see it work calmly? We’ll get more clues about these images and recordings soon, but I’m not focused on that right now.

The cheat subscriptions cost around ten to twenty dollars each, on a subscription basis. They all looked pretty much the same, and of course many were of Russian origin, reusing the same footage or screenshots from other Battlefields and various games. One site even had a feedback section faker than a plastic pacifier—who’s buying that? But one site did catch my attention—not for the cheat itself, but for its creator. They had a WhatsApp contact number right on the site, and the country code gave it away: it’s a Brazilian. I hate to be that guy, but this person did a terrible job of hiding their identity. From that number you can find associated names, likely family members. If I were you, buddy, I’d change that number—no need to leave it exposed.

My next lead was a free cheat anyone could download. So I started hunting down generic download sites, videos, and the like. One video on a fairly large channel—bigger than mine—covered it. The guy only had cheat downloads, zero comments, thousands of views. Weird. How has YouTube not slapped a strike on him yet? In that video he shows how to run the program: it launches a super generic interface, then cuts abruptly to gameplay footage that, if you ask me, looks a bit familiar. In a second video on a smaller channel with fewer views, it’s the same thing. The file even had a password shown only in the video. Then another abrupt cut to that same gameplay we’ve seen a few times, except here the names aren’t censored—and weird names at that, like bots. One was called “BF6 Gameplay Heavy,” which totally spoils what’s really going on: Battlefield 6 Gameplay Review. Probably an internal test recording with developer tools, like the GTA VI leaks. The app shown in the video was also bizarre, with weapons that don’t even exist in the sub-beta and other nonsensical options. I don’t know if they edited the video afterward or if the original already had those elements, but they’re not even trying to hide it. It’s fake.

I downloaded both programs and a few others I found on various sites—and I’ll say right now, one of them is a true bomb. I feel sorry for whoever installed it on their computer. I’m going to start with the simplest and work my way up to the most bizarre, the one that basically nuked the victim’s PC with malware. But we’ll get there.

The first one we’re analyzing is actually quite disappointing—the cheat from that big channel. From the video you’d think it would open something and then show gameplay of the cheat in action. But when you run it, nothing happens. It turns out to be one of many fake programs that do absolutely nothing. The owner probably makes money from YouTube ad revenue or from people clicking and downloading from his site. One thing’s for sure: he’s deleting comments because someone would have complained by now that it doesn’t work.

Now let’s move on to the second malware from YouTube. This one started off badly. Inside the folder we see an image file of Pic—strange, because we’ve already tested a different Pic around here. But this one is even more peculiar. There are a bunch of empty folders and .lua files that are actually blank HTML files. Running it does nothing. The report flags a few things, but most of my findings came from manual inspection. At first I thought it was another bait—but I was very wrong. I ran it through multiple scanners: some detected something, but most couldn’t confirm whether it was malware. So I decided to get my hands dirty and analyze the code manually.

I began by extracting strings—that is, text in the binary—to see if anything stood out. And I found something big: lots of JavaScript code, some of it obfuscated. Where have we seen that? Exactly: in info-stealers. These are malwares designed to steal passwords and sensitive data from victims. They’re common in scams, and I’ve covered several before. A hallmark of info-stealers is code that’s deliberately obfuscated to avoid detection or human reading, often written in JavaScript.

Our challenge now was to decode that obfuscated code and see what it was doing. And that’s where it got complicated. With so many files, I needed to organize my analysis. For that, I used a tool I built myself: an analysis dashboard. With it, I can catalog each malware, note its source and status, and even create a mental map for better visualization. I built this tool from scratch using Lovable, today’s sponsor. Lovable lets you create full web applications using only text prompts via their AI. It integrates natively with Supabase, so you can add databases, login systems, and more—making a full website ridiculously easy. The link in the description gives you daily free credits to try it yourself. And by using my link, you not only support me but also get a discount on the platform. Thanks to Lovable for sponsoring this analysis.

Back to the investigation: once everything was organized, I used FileScan.io to extract the JavaScript from the binary. At first glance it looked normal, but digging deeper I found some suspicious code. I tried various online deobfuscators, but they all failed, likely because random junk was added at the end to break the decoders. So I removed that junk myself and—voilà—the clean code appeared.

Now things made sense. This malware is cunning. Unlike what we thought, it checks if it’s being analyzed. It looks for suspicious usernames, analysis tools running, and even whether it’s inside a virtual machine. If it suspects anything, it simply shuts down. If the environment is “clean,” it moves to attack. But it doesn’t contain the actual virus— it needs to download it. First it contacts a URL that returns another URL, where the real malware resides. Then it adds the downloaded file to the antivirus exceptions list before executing it.

I tried accessing the initial URL—access denied, I needed credentials. Going back to the code, I found two bizarre passwords. Using the second one, I accessed the site, which returned base64 text. Decoding that gave the final link to the malware. With that link and the first password, I finally downloaded the file. Running it, it vanished—simply disappeared. That’s not normal. After the scan, the report confirmed it: it’s an info-stealer, a very evasive one. Checking the IPs and domains, they’re protected and point to the US, Germany, and India. If it weren’t for that Pic icon at the start, I’d give kudos to whoever made this. They created a first stage that disables the antivirus so the second-stage malware can run. But anyway, that’s our first malware of the night. If you’re a cheater who downloaded this, you likely lost multiple accounts. But we still have one more malware to examine—and this one is even more bizarre, basically blowing up the victim’s PC with malware. As you’ll see, many cheaters really fell for it and downloaded it. So let’s close this analysis with a bang.

Now we’ve reached our final chapter and last malware sample. This one had a lot of downloads and, unlike the previous, is very straightforward. Running it through VirusTotal, only two engines detected it—suspicious, but not alarming. So I executed it. In the folder there’s a file called executor.exe. Guess what happens when I click it? Exactly—nothing. Absolutely nothing. The developers didn’t even bother faking a cheat interface. Seriously, how unprofessional. But the Triage report told a different story: 8 out of 10 severity. That’s never good. The two main suspicious actions were hidden command execution and downloading other files. Examining those commands, I saw they were base64-encoded—a classic trick to hide text from surface analysis. Decoded, it was a mess. I wrote a quick Python script to strip out the random junk, and voilà, the clean code appeared.

It tries to disable the antivirus in specific folders, just like the previous malware. Not very original, right? But at least they tried to obfuscate it. If you’re not familiar, this technique turns functional code into what looks like garbage so the antivirus can’t parse it. Then it downloads files from various GitHub links. What are those files? An entire repo of malwares—all amateurish and only useful if the antivirus is off. But either way, this would completely wreck your PC. And it’s not over: the program also disconnects from several Russian servers and downloads even more malware—more than a couple—just to fill the victim’s machine with every kind of digital plague.

So what’s the moral of the story? Don’t cheat. And for the love of God, don’t download random programs from YouTube or GitHub. Well, I hope you enjoyed the video. That last malware was quick, but I wanted to show it because I found it really interesting. Don’t forget to check out Lovable. And if you like this kind of deep-dive, analytical content, leave your comments and feedback below. Thanks for watching, everyone!